
retangulo tarefa.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a34  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08001b40  08001b40  00011b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001bdc  08001bdc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001bdc  08001bdc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001bdc  08001bdc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001bdc  08001bdc  00011bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001be0  08001be0  00011be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08001bf0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001bf0  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000064b2  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000013a2  00000000  00000000  000264e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000680  00000000  00000000  00027890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  00027f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000159de  00000000  00000000  000284e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005a81  00000000  00000000  0003dec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080e9d  00000000  00000000  00043947  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c47e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018fc  00000000  00000000  000c4860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001b28 	.word	0x08001b28

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001b28 	.word	0x08001b28

0800014c <ST7735_Select>:
    ST7735_NORON  ,    Delay, //  3: Normal display on, no args, w/HAL_Delay
      10,                     //     10 ms HAL_Delay
    ST7735_DISPON ,    Delay, //  4: Main screen turn on, no args w/HAL_Delay
      100 };                  //     100 ms HAL_Delay

static void ST7735_Select() {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000150:	2200      	movs	r2, #0
 8000152:	2110      	movs	r1, #16
 8000154:	4802      	ldr	r0, [pc, #8]	; (8000160 <ST7735_Select+0x14>)
 8000156:	f000 fe53 	bl	8000e00 <HAL_GPIO_WritePin>
}
 800015a:	bf00      	nop
 800015c:	bd80      	pop	{r7, pc}
 800015e:	bf00      	nop
 8000160:	40010800 	.word	0x40010800

08000164 <ST7735_Unselect>:

void ST7735_Unselect() {
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2110      	movs	r1, #16
 800016c:	4802      	ldr	r0, [pc, #8]	; (8000178 <ST7735_Unselect+0x14>)
 800016e:	f000 fe47 	bl	8000e00 <HAL_GPIO_WritePin>
}
 8000172:	bf00      	nop
 8000174:	bd80      	pop	{r7, pc}
 8000176:	bf00      	nop
 8000178:	40010800 	.word	0x40010800

0800017c <ST7735_Reset>:

static void ST7735_Reset() {
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8000180:	2200      	movs	r2, #0
 8000182:	2102      	movs	r1, #2
 8000184:	4806      	ldr	r0, [pc, #24]	; (80001a0 <ST7735_Reset+0x24>)
 8000186:	f000 fe3b 	bl	8000e00 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800018a:	2005      	movs	r0, #5
 800018c:	f000 fbd8 	bl	8000940 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4802      	ldr	r0, [pc, #8]	; (80001a0 <ST7735_Reset+0x24>)
 8000196:	f000 fe33 	bl	8000e00 <HAL_GPIO_WritePin>
}
 800019a:	bf00      	nop
 800019c:	bd80      	pop	{r7, pc}
 800019e:	bf00      	nop
 80001a0:	40010c00 	.word	0x40010c00

080001a4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80001a4:	b580      	push	{r7, lr}
 80001a6:	b082      	sub	sp, #8
 80001a8:	af00      	add	r7, sp, #0
 80001aa:	4603      	mov	r3, r0
 80001ac:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80001ae:	2200      	movs	r2, #0
 80001b0:	2101      	movs	r1, #1
 80001b2:	4807      	ldr	r0, [pc, #28]	; (80001d0 <ST7735_WriteCommand+0x2c>)
 80001b4:	f000 fe24 	bl	8000e00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80001b8:	1df9      	adds	r1, r7, #7
 80001ba:	f04f 33ff 	mov.w	r3, #4294967295
 80001be:	2201      	movs	r2, #1
 80001c0:	4804      	ldr	r0, [pc, #16]	; (80001d4 <ST7735_WriteCommand+0x30>)
 80001c2:	f001 faa3 	bl	800170c <HAL_SPI_Transmit>
}
 80001c6:	bf00      	nop
 80001c8:	3708      	adds	r7, #8
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bd80      	pop	{r7, pc}
 80001ce:	bf00      	nop
 80001d0:	40010c00 	.word	0x40010c00
 80001d4:	2000003c 	.word	0x2000003c

080001d8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]
 80001e0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	2101      	movs	r1, #1
 80001e6:	4807      	ldr	r0, [pc, #28]	; (8000204 <ST7735_WriteData+0x2c>)
 80001e8:	f000 fe0a 	bl	8000e00 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	f04f 33ff 	mov.w	r3, #4294967295
 80001f4:	6879      	ldr	r1, [r7, #4]
 80001f6:	4804      	ldr	r0, [pc, #16]	; (8000208 <ST7735_WriteData+0x30>)
 80001f8:	f001 fa88 	bl	800170c <HAL_SPI_Transmit>
}
 80001fc:	bf00      	nop
 80001fe:	3708      	adds	r7, #8
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40010c00 	.word	0x40010c00
 8000208:	2000003c 	.word	0x2000003c

0800020c <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 800020c:	b580      	push	{r7, lr}
 800020e:	b084      	sub	sp, #16
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800021e:	e034      	b.n	800028a <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	1c5a      	adds	r2, r3, #1
 8000224:	607a      	str	r2, [r7, #4]
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800022a:	7afb      	ldrb	r3, [r7, #11]
 800022c:	4618      	mov	r0, r3
 800022e:	f7ff ffb9 	bl	80001a4 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	1c5a      	adds	r2, r3, #1
 8000236:	607a      	str	r2, [r7, #4]
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	72bb      	strb	r3, [r7, #10]
        // If high bit set, HAL_Delay follows args
        ms = numArgs & Delay;
 800023c:	7abb      	ldrb	r3, [r7, #10]
 800023e:	b29b      	uxth	r3, r3
 8000240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000244:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~Delay;
 8000246:	7abb      	ldrb	r3, [r7, #10]
 8000248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800024c:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800024e:	7abb      	ldrb	r3, [r7, #10]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d008      	beq.n	8000266 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000254:	7abb      	ldrb	r3, [r7, #10]
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f7ff ffbd 	bl	80001d8 <ST7735_WriteData>
            addr += numArgs;
 800025e:	7abb      	ldrb	r3, [r7, #10]
 8000260:	687a      	ldr	r2, [r7, #4]
 8000262:	4413      	add	r3, r2
 8000264:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8000266:	89bb      	ldrh	r3, [r7, #12]
 8000268:	2b00      	cmp	r3, #0
 800026a:	d00e      	beq.n	800028a <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	607a      	str	r2, [r7, #4]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8000276:	89bb      	ldrh	r3, [r7, #12]
 8000278:	2bff      	cmp	r3, #255	; 0xff
 800027a:	d102      	bne.n	8000282 <ST7735_ExecuteCommandList+0x76>
 800027c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000280:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000282:	89bb      	ldrh	r3, [r7, #12]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 fb5b 	bl	8000940 <HAL_Delay>
    while(numCommands--) {
 800028a:	7bfb      	ldrb	r3, [r7, #15]
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	73fa      	strb	r2, [r7, #15]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d1c5      	bne.n	8000220 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8000294:	bf00      	nop
 8000296:	3710      	adds	r7, #16
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800029c:	b590      	push	{r4, r7, lr}
 800029e:	b085      	sub	sp, #20
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4604      	mov	r4, r0
 80002a4:	4608      	mov	r0, r1
 80002a6:	4611      	mov	r1, r2
 80002a8:	461a      	mov	r2, r3
 80002aa:	4623      	mov	r3, r4
 80002ac:	71fb      	strb	r3, [r7, #7]
 80002ae:	4603      	mov	r3, r0
 80002b0:	71bb      	strb	r3, [r7, #6]
 80002b2:	460b      	mov	r3, r1
 80002b4:	717b      	strb	r3, [r7, #5]
 80002b6:	4613      	mov	r3, r2
 80002b8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80002ba:	202a      	movs	r0, #42	; 0x2a
 80002bc:	f7ff ff72 	bl	80001a4 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80002c0:	2300      	movs	r3, #0
 80002c2:	733b      	strb	r3, [r7, #12]
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	737b      	strb	r3, [r7, #13]
 80002cc:	2300      	movs	r3, #0
 80002ce:	73bb      	strb	r3, [r7, #14]
 80002d0:	797b      	ldrb	r3, [r7, #5]
 80002d2:	3301      	adds	r3, #1
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002d8:	f107 030c 	add.w	r3, r7, #12
 80002dc:	2104      	movs	r1, #4
 80002de:	4618      	mov	r0, r3
 80002e0:	f7ff ff7a 	bl	80001d8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80002e4:	202b      	movs	r0, #43	; 0x2b
 80002e6:	f7ff ff5d 	bl	80001a4 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80002ea:	79bb      	ldrb	r3, [r7, #6]
 80002ec:	331a      	adds	r3, #26
 80002ee:	b2db      	uxtb	r3, r3
 80002f0:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80002f2:	793b      	ldrb	r3, [r7, #4]
 80002f4:	331a      	adds	r3, #26
 80002f6:	b2db      	uxtb	r3, r3
 80002f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80002fa:	f107 030c 	add.w	r3, r7, #12
 80002fe:	2104      	movs	r1, #4
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff69 	bl	80001d8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000306:	202c      	movs	r0, #44	; 0x2c
 8000308:	f7ff ff4c 	bl	80001a4 <ST7735_WriteCommand>
}
 800030c:	bf00      	nop
 800030e:	3714      	adds	r7, #20
 8000310:	46bd      	mov	sp, r7
 8000312:	bd90      	pop	{r4, r7, pc}

08000314 <ST7735_Init>:

void ST7735_Init() {
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
    ST7735_Select();
 8000318:	f7ff ff18 	bl	800014c <ST7735_Select>
    ST7735_Reset();
 800031c:	f7ff ff2e 	bl	800017c <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8000320:	4806      	ldr	r0, [pc, #24]	; (800033c <ST7735_Init+0x28>)
 8000322:	f7ff ff73 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8000326:	4806      	ldr	r0, [pc, #24]	; (8000340 <ST7735_Init+0x2c>)
 8000328:	f7ff ff70 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 800032c:	4805      	ldr	r0, [pc, #20]	; (8000344 <ST7735_Init+0x30>)
 800032e:	f7ff ff6d 	bl	800020c <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8000332:	f7ff ff17 	bl	8000164 <ST7735_Unselect>
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08001b54 	.word	0x08001b54
 8000340:	08001b90 	.word	0x08001b90
 8000344:	08001ba0 	.word	0x08001ba0

08000348 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b084      	sub	sp, #16
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
 8000352:	460b      	mov	r3, r1
 8000354:	80bb      	strh	r3, [r7, #4]
 8000356:	4613      	mov	r3, r2
 8000358:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	2b9f      	cmp	r3, #159	; 0x9f
 800035e:	d823      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
 8000360:	88bb      	ldrh	r3, [r7, #4]
 8000362:	2b4f      	cmp	r3, #79	; 0x4f
 8000364:	d820      	bhi.n	80003a8 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 8000366:	f7ff fef1 	bl	800014c <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 800036a:	88fb      	ldrh	r3, [r7, #6]
 800036c:	b2d8      	uxtb	r0, r3
 800036e:	88bb      	ldrh	r3, [r7, #4]
 8000370:	b2d9      	uxtb	r1, r3
 8000372:	88fb      	ldrh	r3, [r7, #6]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	3301      	adds	r3, #1
 8000378:	b2da      	uxtb	r2, r3
 800037a:	88bb      	ldrh	r3, [r7, #4]
 800037c:	b2db      	uxtb	r3, r3
 800037e:	3301      	adds	r3, #1
 8000380:	b2db      	uxtb	r3, r3
 8000382:	f7ff ff8b 	bl	800029c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000386:	887b      	ldrh	r3, [r7, #2]
 8000388:	0a1b      	lsrs	r3, r3, #8
 800038a:	b29b      	uxth	r3, r3
 800038c:	b2db      	uxtb	r3, r3
 800038e:	733b      	strb	r3, [r7, #12]
 8000390:	887b      	ldrh	r3, [r7, #2]
 8000392:	b2db      	uxtb	r3, r3
 8000394:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 8000396:	f107 030c 	add.w	r3, r7, #12
 800039a:	2102      	movs	r1, #2
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff1b 	bl	80001d8 <ST7735_WriteData>

    ST7735_Unselect();
 80003a2:	f7ff fedf 	bl	8000164 <ST7735_Unselect>
 80003a6:	e000      	b.n	80003aa <ST7735_DrawPixel+0x62>
        return;
 80003a8:	bf00      	nop
}
 80003aa:	3710      	adds	r7, #16
 80003ac:	46bd      	mov	sp, r7
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <ST7735_FillRectangle>:
    }

    ST7735_Unselect();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80003b0:	b590      	push	{r4, r7, lr}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4604      	mov	r4, r0
 80003b8:	4608      	mov	r0, r1
 80003ba:	4611      	mov	r1, r2
 80003bc:	461a      	mov	r2, r3
 80003be:	4623      	mov	r3, r4
 80003c0:	80fb      	strh	r3, [r7, #6]
 80003c2:	4603      	mov	r3, r0
 80003c4:	80bb      	strh	r3, [r7, #4]
 80003c6:	460b      	mov	r3, r1
 80003c8:	807b      	strh	r3, [r7, #2]
 80003ca:	4613      	mov	r3, r2
 80003cc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80003ce:	88fb      	ldrh	r3, [r7, #6]
 80003d0:	2b9f      	cmp	r3, #159	; 0x9f
 80003d2:	d859      	bhi.n	8000488 <ST7735_FillRectangle+0xd8>
 80003d4:	88bb      	ldrh	r3, [r7, #4]
 80003d6:	2b4f      	cmp	r3, #79	; 0x4f
 80003d8:	d856      	bhi.n	8000488 <ST7735_FillRectangle+0xd8>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80003da:	88fa      	ldrh	r2, [r7, #6]
 80003dc:	887b      	ldrh	r3, [r7, #2]
 80003de:	4413      	add	r3, r2
 80003e0:	3b01      	subs	r3, #1
 80003e2:	2b9f      	cmp	r3, #159	; 0x9f
 80003e4:	dd03      	ble.n	80003ee <ST7735_FillRectangle+0x3e>
 80003e6:	88fb      	ldrh	r3, [r7, #6]
 80003e8:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 80003ec:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80003ee:	88ba      	ldrh	r2, [r7, #4]
 80003f0:	883b      	ldrh	r3, [r7, #0]
 80003f2:	4413      	add	r3, r2
 80003f4:	3b01      	subs	r3, #1
 80003f6:	2b4f      	cmp	r3, #79	; 0x4f
 80003f8:	dd03      	ble.n	8000402 <ST7735_FillRectangle+0x52>
 80003fa:	88bb      	ldrh	r3, [r7, #4]
 80003fc:	f1c3 0350 	rsb	r3, r3, #80	; 0x50
 8000400:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000402:	f7ff fea3 	bl	800014c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000406:	88fb      	ldrh	r3, [r7, #6]
 8000408:	b2d8      	uxtb	r0, r3
 800040a:	88bb      	ldrh	r3, [r7, #4]
 800040c:	b2d9      	uxtb	r1, r3
 800040e:	88fb      	ldrh	r3, [r7, #6]
 8000410:	b2da      	uxtb	r2, r3
 8000412:	887b      	ldrh	r3, [r7, #2]
 8000414:	b2db      	uxtb	r3, r3
 8000416:	4413      	add	r3, r2
 8000418:	b2db      	uxtb	r3, r3
 800041a:	3b01      	subs	r3, #1
 800041c:	b2dc      	uxtb	r4, r3
 800041e:	88bb      	ldrh	r3, [r7, #4]
 8000420:	b2da      	uxtb	r2, r3
 8000422:	883b      	ldrh	r3, [r7, #0]
 8000424:	b2db      	uxtb	r3, r3
 8000426:	4413      	add	r3, r2
 8000428:	b2db      	uxtb	r3, r3
 800042a:	3b01      	subs	r3, #1
 800042c:	b2db      	uxtb	r3, r3
 800042e:	4622      	mov	r2, r4
 8000430:	f7ff ff34 	bl	800029c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000434:	8c3b      	ldrh	r3, [r7, #32]
 8000436:	0a1b      	lsrs	r3, r3, #8
 8000438:	b29b      	uxth	r3, r3
 800043a:	b2db      	uxtb	r3, r3
 800043c:	733b      	strb	r3, [r7, #12]
 800043e:	8c3b      	ldrh	r3, [r7, #32]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8000444:	2201      	movs	r2, #1
 8000446:	2101      	movs	r1, #1
 8000448:	4811      	ldr	r0, [pc, #68]	; (8000490 <ST7735_FillRectangle+0xe0>)
 800044a:	f000 fcd9 	bl	8000e00 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800044e:	883b      	ldrh	r3, [r7, #0]
 8000450:	80bb      	strh	r3, [r7, #4]
 8000452:	e013      	b.n	800047c <ST7735_FillRectangle+0xcc>
        for(x = w; x > 0; x--) {
 8000454:	887b      	ldrh	r3, [r7, #2]
 8000456:	80fb      	strh	r3, [r7, #6]
 8000458:	e00a      	b.n	8000470 <ST7735_FillRectangle+0xc0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800045a:	f107 010c 	add.w	r1, r7, #12
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	2202      	movs	r2, #2
 8000464:	480b      	ldr	r0, [pc, #44]	; (8000494 <ST7735_FillRectangle+0xe4>)
 8000466:	f001 f951 	bl	800170c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800046a:	88fb      	ldrh	r3, [r7, #6]
 800046c:	3b01      	subs	r3, #1
 800046e:	80fb      	strh	r3, [r7, #6]
 8000470:	88fb      	ldrh	r3, [r7, #6]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d1f1      	bne.n	800045a <ST7735_FillRectangle+0xaa>
    for(y = h; y > 0; y--) {
 8000476:	88bb      	ldrh	r3, [r7, #4]
 8000478:	3b01      	subs	r3, #1
 800047a:	80bb      	strh	r3, [r7, #4]
 800047c:	88bb      	ldrh	r3, [r7, #4]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1e8      	bne.n	8000454 <ST7735_FillRectangle+0xa4>
        }
    }

    ST7735_Unselect();
 8000482:	f7ff fe6f 	bl	8000164 <ST7735_Unselect>
 8000486:	e000      	b.n	800048a <ST7735_FillRectangle+0xda>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8000488:	bf00      	nop
}
 800048a:	3714      	adds	r7, #20
 800048c:	46bd      	mov	sp, r7
 800048e:	bd90      	pop	{r4, r7, pc}
 8000490:	40010c00 	.word	0x40010c00
 8000494:	2000003c 	.word	0x2000003c

08000498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000498:	b590      	push	{r4, r7, lr}
 800049a:	b083      	sub	sp, #12
 800049c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049e:	f000 f9ed 	bl	800087c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a2:	f000 f84f 	bl	8000544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a6:	f000 f8c1 	bl	800062c <MX_GPIO_Init>
  MX_SPI1_Init();
 80004aa:	f000 f887 	bl	80005bc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ST7735_Init();
 80004ae:	f7ff ff31 	bl	8000314 <ST7735_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
 	   pixel.x=80;
 80004b2:	4b21      	ldr	r3, [pc, #132]	; (8000538 <main+0xa0>)
 80004b4:	2250      	movs	r2, #80	; 0x50
 80004b6:	801a      	strh	r2, [r3, #0]
 	   pixel.y=80;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	; (8000538 <main+0xa0>)
 80004ba:	2250      	movs	r2, #80	; 0x50
 80004bc:	805a      	strh	r2, [r3, #2]
 	   pixel.cor=GREEN;
 80004be:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <main+0xa0>)
 80004c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80004c4:	809a      	strh	r2, [r3, #4]

 	   r1.x = 10;
 80004c6:	4b1d      	ldr	r3, [pc, #116]	; (800053c <main+0xa4>)
 80004c8:	220a      	movs	r2, #10
 80004ca:	801a      	strh	r2, [r3, #0]
 	   r1.y = 5;
 80004cc:	4b1b      	ldr	r3, [pc, #108]	; (800053c <main+0xa4>)
 80004ce:	2205      	movs	r2, #5
 80004d0:	805a      	strh	r2, [r3, #2]
 	   r1.w = 5;
 80004d2:	4b1a      	ldr	r3, [pc, #104]	; (800053c <main+0xa4>)
 80004d4:	2205      	movs	r2, #5
 80004d6:	809a      	strh	r2, [r3, #4]
 	   r1.h = 10;
 80004d8:	4b18      	ldr	r3, [pc, #96]	; (800053c <main+0xa4>)
 80004da:	220a      	movs	r2, #10
 80004dc:	80da      	strh	r2, [r3, #6]
 	   r1.cor = WHITE;
 80004de:	4b17      	ldr	r3, [pc, #92]	; (800053c <main+0xa4>)
 80004e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004e4:	811a      	strh	r2, [r3, #8]
 	   r2.x = 10;
 80004e6:	4b16      	ldr	r3, [pc, #88]	; (8000540 <main+0xa8>)
 80004e8:	220a      	movs	r2, #10
 80004ea:	801a      	strh	r2, [r3, #0]
 	   r2.y = 5;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <main+0xa8>)
 80004ee:	2205      	movs	r2, #5
 80004f0:	805a      	strh	r2, [r3, #2]
 	   r2.w = 5;
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <main+0xa8>)
 80004f4:	2205      	movs	r2, #5
 80004f6:	809a      	strh	r2, [r3, #4]
 	   r2.h = 10;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <main+0xa8>)
 80004fa:	220a      	movs	r2, #10
 80004fc:	80da      	strh	r2, [r3, #6]
 	   r2.cor = GREEN;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <main+0xa8>)
 8000500:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000504:	811a      	strh	r2, [r3, #8]
  while (1)
  {
	  ST7735_FillRectangle(r1.x,r1.y,r1.w,r1.h,r1.cor);
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0xa4>)
 8000508:	8818      	ldrh	r0, [r3, #0]
 800050a:	4b0c      	ldr	r3, [pc, #48]	; (800053c <main+0xa4>)
 800050c:	8859      	ldrh	r1, [r3, #2]
 800050e:	4b0b      	ldr	r3, [pc, #44]	; (800053c <main+0xa4>)
 8000510:	889a      	ldrh	r2, [r3, #4]
 8000512:	4b0a      	ldr	r3, [pc, #40]	; (800053c <main+0xa4>)
 8000514:	88dc      	ldrh	r4, [r3, #6]
 8000516:	4b09      	ldr	r3, [pc, #36]	; (800053c <main+0xa4>)
 8000518:	891b      	ldrh	r3, [r3, #8]
 800051a:	9300      	str	r3, [sp, #0]
 800051c:	4623      	mov	r3, r4
 800051e:	f7ff ff47 	bl	80003b0 <ST7735_FillRectangle>
	  ST7735_DrawPixel(pixel.x,pixel.y,pixel.cor);
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <main+0xa0>)
 8000524:	8818      	ldrh	r0, [r3, #0]
 8000526:	4b04      	ldr	r3, [pc, #16]	; (8000538 <main+0xa0>)
 8000528:	8859      	ldrh	r1, [r3, #2]
 800052a:	4b03      	ldr	r3, [pc, #12]	; (8000538 <main+0xa0>)
 800052c:	889b      	ldrh	r3, [r3, #4]
 800052e:	461a      	mov	r2, r3
 8000530:	f7ff ff0a 	bl	8000348 <ST7735_DrawPixel>
	  ST7735_FillRectangle(r1.x,r1.y,r1.w,r1.h,r1.cor);
 8000534:	e7e7      	b.n	8000506 <main+0x6e>
 8000536:	bf00      	nop
 8000538:	20000028 	.word	0x20000028
 800053c:	20000094 	.word	0x20000094
 8000540:	20000030 	.word	0x20000030

08000544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b090      	sub	sp, #64	; 0x40
 8000548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	2228      	movs	r2, #40	; 0x28
 8000550:	2100      	movs	r1, #0
 8000552:	4618      	mov	r0, r3
 8000554:	f001 fae0 	bl	8001b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	605a      	str	r2, [r3, #4]
 8000560:	609a      	str	r2, [r3, #8]
 8000562:	60da      	str	r2, [r3, #12]
 8000564:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000566:	2302      	movs	r3, #2
 8000568:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056a:	2301      	movs	r3, #1
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800056e:	2310      	movs	r3, #16
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000572:	2300      	movs	r3, #0
 8000574:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	4618      	mov	r0, r3
 800057c:	f000 fc58 	bl	8000e30 <HAL_RCC_OscConfig>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000586:	f000 f8b1 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058a:	230f      	movs	r3, #15
 800058c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800058e:	2300      	movs	r3, #0
 8000590:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000592:	2300      	movs	r3, #0
 8000594:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fec4 	bl	8001330 <HAL_RCC_ClockConfig>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005ae:	f000 f89d 	bl	80006ec <Error_Handler>
  }
}
 80005b2:	bf00      	nop
 80005b4:	3740      	adds	r7, #64	; 0x40
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005c0:	4b18      	ldr	r3, [pc, #96]	; (8000624 <MX_SPI1_Init+0x68>)
 80005c2:	4a19      	ldr	r2, [pc, #100]	; (8000628 <MX_SPI1_Init+0x6c>)
 80005c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005c6:	4b17      	ldr	r3, [pc, #92]	; (8000624 <MX_SPI1_Init+0x68>)
 80005c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80005ce:	4b15      	ldr	r3, [pc, #84]	; (8000624 <MX_SPI1_Init+0x68>)
 80005d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80005d4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_SPI1_Init+0x68>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_SPI1_Init+0x68>)
 80005de:	2202      	movs	r2, #2
 80005e0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_SPI1_Init+0x68>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005e8:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_SPI1_Init+0x68>)
 80005ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ee:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_SPI1_Init+0x68>)
 80005f2:	2220      	movs	r2, #32
 80005f4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_SPI1_Init+0x68>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_SPI1_Init+0x68>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_SPI1_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_SPI1_Init+0x68>)
 800060a:	220a      	movs	r2, #10
 800060c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_SPI1_Init+0x68>)
 8000610:	f000 fff8 	bl	8001604 <HAL_SPI_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800061a:	f000 f867 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	2000003c 	.word	0x2000003c
 8000628:	40013000 	.word	0x40013000

0800062c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000632:	f107 0308 	add.w	r3, r7, #8
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <MX_GPIO_Init+0xb4>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a26      	ldr	r2, [pc, #152]	; (80006e0 <MX_GPIO_Init+0xb4>)
 8000646:	f043 0304 	orr.w	r3, r3, #4
 800064a:	6193      	str	r3, [r2, #24]
 800064c:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_GPIO_Init+0xb4>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f003 0304 	and.w	r3, r3, #4
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0xb4>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <MX_GPIO_Init+0xb4>)
 800065e:	f043 0308 	orr.w	r3, r3, #8
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_GPIO_Init+0xb4>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f003 0308 	and.w	r3, r3, #8
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2110      	movs	r1, #16
 8000674:	481b      	ldr	r0, [pc, #108]	; (80006e4 <MX_GPIO_Init+0xb8>)
 8000676:	f000 fbc3 	bl	8000e00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 800067a:	2200      	movs	r2, #0
 800067c:	217b      	movs	r1, #123	; 0x7b
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <MX_GPIO_Init+0xbc>)
 8000680:	f000 fbbe 	bl	8000e00 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : ST7735_CS_Pin */
  GPIO_InitStruct.Pin = ST7735_CS_Pin;
 8000684:	2310      	movs	r3, #16
 8000686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000688:	2301      	movs	r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000690:	2302      	movs	r3, #2
 8000692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ST7735_CS_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	4619      	mov	r1, r3
 800069a:	4812      	ldr	r0, [pc, #72]	; (80006e4 <MX_GPIO_Init+0xb8>)
 800069c:	f000 fa56 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : ST7735_DC_Pin ST7735_RES_Pin PB3 PB4
                           PB5 PB6 */
  GPIO_InitStruct.Pin = ST7735_DC_Pin|ST7735_RES_Pin|GPIO_PIN_3|GPIO_PIN_4
 80006a0:	237b      	movs	r3, #123	; 0x7b
 80006a2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a4:	2301      	movs	r3, #1
 80006a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a8:	2300      	movs	r3, #0
 80006aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	2302      	movs	r3, #2
 80006ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	4619      	mov	r1, r3
 80006b6:	480c      	ldr	r0, [pc, #48]	; (80006e8 <MX_GPIO_Init+0xbc>)
 80006b8:	f000 fa48 	bl	8000b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA9 PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80006bc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80006c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	f107 0308 	add.w	r3, r7, #8
 80006ce:	4619      	mov	r1, r3
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_GPIO_Init+0xb8>)
 80006d2:	f000 fa3b 	bl	8000b4c <HAL_GPIO_Init>

}
 80006d6:	bf00      	nop
 80006d8:	3718      	adds	r7, #24
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40021000 	.word	0x40021000
 80006e4:	40010800 	.word	0x40010800
 80006e8:	40010c00 	.word	0x40010c00

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <Error_Handler+0x6>

080006f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006fa:	4b15      	ldr	r3, [pc, #84]	; (8000750 <HAL_MspInit+0x5c>)
 80006fc:	699b      	ldr	r3, [r3, #24]
 80006fe:	4a14      	ldr	r2, [pc, #80]	; (8000750 <HAL_MspInit+0x5c>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	6193      	str	r3, [r2, #24]
 8000706:	4b12      	ldr	r3, [pc, #72]	; (8000750 <HAL_MspInit+0x5c>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <HAL_MspInit+0x5c>)
 8000714:	69db      	ldr	r3, [r3, #28]
 8000716:	4a0e      	ldr	r2, [pc, #56]	; (8000750 <HAL_MspInit+0x5c>)
 8000718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071c:	61d3      	str	r3, [r2, #28]
 800071e:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <HAL_MspInit+0x5c>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <HAL_MspInit+0x60>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	4a04      	ldr	r2, [pc, #16]	; (8000754 <HAL_MspInit+0x60>)
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000
 8000754:	40010000 	.word	0x40010000

08000758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a15      	ldr	r2, [pc, #84]	; (80007c8 <HAL_SPI_MspInit+0x70>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d123      	bne.n	80007c0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <HAL_SPI_MspInit+0x74>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a13      	ldr	r2, [pc, #76]	; (80007cc <HAL_SPI_MspInit+0x74>)
 800077e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_SPI_MspInit+0x74>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_SPI_MspInit+0x74>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a0d      	ldr	r2, [pc, #52]	; (80007cc <HAL_SPI_MspInit+0x74>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <HAL_SPI_MspInit+0x74>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80007a8:	23a0      	movs	r3, #160	; 0xa0
 80007aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ac:	2302      	movs	r3, #2
 80007ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b0:	2303      	movs	r3, #3
 80007b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	f107 0310 	add.w	r3, r7, #16
 80007b8:	4619      	mov	r1, r3
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <HAL_SPI_MspInit+0x78>)
 80007bc:	f000 f9c6 	bl	8000b4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40013000 	.word	0x40013000
 80007cc:	40021000 	.word	0x40021000
 80007d0:	40010800 	.word	0x40010800

080007d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d8:	e7fe      	b.n	80007d8 <NMI_Handler+0x4>

080007da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007de:	e7fe      	b.n	80007de <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	e7fe      	b.n	80007e4 <MemManage_Handler+0x4>

080007e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e6:	b480      	push	{r7}
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ea:	e7fe      	b.n	80007ea <BusFault_Handler+0x4>

080007ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <UsageFault_Handler+0x4>

080007f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f2:	b480      	push	{r7}
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f6:	bf00      	nop
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bc80      	pop	{r7}
 80007fc:	4770      	bx	lr

080007fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	bc80      	pop	{r7}
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	bc80      	pop	{r7}
 8000814:	4770      	bx	lr

08000816 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000816:	b580      	push	{r7, lr}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081a:	f000 f875 	bl	8000908 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}

08000822 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
	...

08000830 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480c      	ldr	r0, [pc, #48]	; (8000864 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000832:	490d      	ldr	r1, [pc, #52]	; (8000868 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000834:	4a0d      	ldr	r2, [pc, #52]	; (800086c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a0a      	ldr	r2, [pc, #40]	; (8000870 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000848:	4c0a      	ldr	r4, [pc, #40]	; (8000874 <LoopFillZerobss+0x22>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000856:	f7ff ffe4 	bl	8000822 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800085a:	f001 f939 	bl	8001ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085e:	f7ff fe1b 	bl	8000498 <main>
  bx lr
 8000862:	4770      	bx	lr
  ldr r0, =_sdata
 8000864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800086c:	08001be4 	.word	0x08001be4
  ldr r2, =_sbss
 8000870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000874:	200000a4 	.word	0x200000a4

08000878 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000878:	e7fe      	b.n	8000878 <ADC1_2_IRQHandler>
	...

0800087c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000880:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <HAL_Init+0x28>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a07      	ldr	r2, [pc, #28]	; (80008a4 <HAL_Init+0x28>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 f929 	bl	8000ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000892:	2000      	movs	r0, #0
 8000894:	f000 f808 	bl	80008a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000898:	f7ff ff2c 	bl	80006f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40022000 	.word	0x40022000

080008a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <HAL_InitTick+0x54>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <HAL_InitTick+0x58>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008be:	fbb3 f3f1 	udiv	r3, r3, r1
 80008c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 f933 	bl	8000b32 <HAL_SYSTICK_Config>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
 80008d4:	e00e      	b.n	80008f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2b0f      	cmp	r3, #15
 80008da:	d80a      	bhi.n	80008f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008dc:	2200      	movs	r2, #0
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 30ff 	mov.w	r0, #4294967295
 80008e4:	f000 f909 	bl	8000afa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e8:	4a06      	ldr	r2, [pc, #24]	; (8000904 <HAL_InitTick+0x5c>)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e000      	b.n	80008f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20000000 	.word	0x20000000
 8000900:	20000008 	.word	0x20000008
 8000904:	20000004 	.word	0x20000004

08000908 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800090c:	4b05      	ldr	r3, [pc, #20]	; (8000924 <HAL_IncTick+0x1c>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	461a      	mov	r2, r3
 8000912:	4b05      	ldr	r3, [pc, #20]	; (8000928 <HAL_IncTick+0x20>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4413      	add	r3, r2
 8000918:	4a03      	ldr	r2, [pc, #12]	; (8000928 <HAL_IncTick+0x20>)
 800091a:	6013      	str	r3, [r2, #0]
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	bc80      	pop	{r7}
 8000922:	4770      	bx	lr
 8000924:	20000008 	.word	0x20000008
 8000928:	200000a0 	.word	0x200000a0

0800092c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  return uwTick;
 8000930:	4b02      	ldr	r3, [pc, #8]	; (800093c <HAL_GetTick+0x10>)
 8000932:	681b      	ldr	r3, [r3, #0]
}
 8000934:	4618      	mov	r0, r3
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr
 800093c:	200000a0 	.word	0x200000a0

08000940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000948:	f7ff fff0 	bl	800092c <HAL_GetTick>
 800094c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000958:	d005      	beq.n	8000966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_Delay+0x40>)
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	4413      	add	r3, r2
 8000964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000966:	bf00      	nop
 8000968:	f7ff ffe0 	bl	800092c <HAL_GetTick>
 800096c:	4602      	mov	r2, r0
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	d8f7      	bhi.n	8000968 <HAL_Delay+0x28>
  {
  }
}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	20000008 	.word	0x20000008

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	; (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	; (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	; (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	; 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	; 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bc80      	pop	{r7}
 8000a9e:	4770      	bx	lr

08000aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ab0:	d301      	bcc.n	8000ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab2:	2301      	movs	r3, #1
 8000ab4:	e00f      	b.n	8000ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <SysTick_Config+0x40>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3b01      	subs	r3, #1
 8000abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000abe:	210f      	movs	r1, #15
 8000ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac4:	f7ff ff90 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <SysTick_Config+0x40>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <SysTick_Config+0x40>)
 8000ad0:	2207      	movs	r2, #7
 8000ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	e000e010 	.word	0xe000e010

08000ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff ff49 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afa:	b580      	push	{r7, lr}
 8000afc:	b086      	sub	sp, #24
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	4603      	mov	r3, r0
 8000b02:	60b9      	str	r1, [r7, #8]
 8000b04:	607a      	str	r2, [r7, #4]
 8000b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b0c:	f7ff ff5e 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	68b9      	ldr	r1, [r7, #8]
 8000b16:	6978      	ldr	r0, [r7, #20]
 8000b18:	f7ff ff90 	bl	8000a3c <NVIC_EncodePriority>
 8000b1c:	4602      	mov	r2, r0
 8000b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b22:	4611      	mov	r1, r2
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff ff5f 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff ffb0 	bl	8000aa0 <SysTick_Config>
 8000b40:	4603      	mov	r3, r0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b08b      	sub	sp, #44	; 0x2c
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b56:	2300      	movs	r3, #0
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b5e:	e127      	b.n	8000db0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b60:	2201      	movs	r2, #1
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	fa02 f303 	lsl.w	r3, r2, r3
 8000b68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	69fa      	ldr	r2, [r7, #28]
 8000b70:	4013      	ands	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b74:	69ba      	ldr	r2, [r7, #24]
 8000b76:	69fb      	ldr	r3, [r7, #28]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	f040 8116 	bne.w	8000daa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	2b12      	cmp	r3, #18
 8000b84:	d034      	beq.n	8000bf0 <HAL_GPIO_Init+0xa4>
 8000b86:	2b12      	cmp	r3, #18
 8000b88:	d80d      	bhi.n	8000ba6 <HAL_GPIO_Init+0x5a>
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	d02b      	beq.n	8000be6 <HAL_GPIO_Init+0x9a>
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d804      	bhi.n	8000b9c <HAL_GPIO_Init+0x50>
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d031      	beq.n	8000bfa <HAL_GPIO_Init+0xae>
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d01c      	beq.n	8000bd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b9a:	e048      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000b9c:	2b03      	cmp	r3, #3
 8000b9e:	d043      	beq.n	8000c28 <HAL_GPIO_Init+0xdc>
 8000ba0:	2b11      	cmp	r3, #17
 8000ba2:	d01b      	beq.n	8000bdc <HAL_GPIO_Init+0x90>
          break;
 8000ba4:	e043      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000ba6:	4a89      	ldr	r2, [pc, #548]	; (8000dcc <HAL_GPIO_Init+0x280>)
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d026      	beq.n	8000bfa <HAL_GPIO_Init+0xae>
 8000bac:	4a87      	ldr	r2, [pc, #540]	; (8000dcc <HAL_GPIO_Init+0x280>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d806      	bhi.n	8000bc0 <HAL_GPIO_Init+0x74>
 8000bb2:	4a87      	ldr	r2, [pc, #540]	; (8000dd0 <HAL_GPIO_Init+0x284>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d020      	beq.n	8000bfa <HAL_GPIO_Init+0xae>
 8000bb8:	4a86      	ldr	r2, [pc, #536]	; (8000dd4 <HAL_GPIO_Init+0x288>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d01d      	beq.n	8000bfa <HAL_GPIO_Init+0xae>
          break;
 8000bbe:	e036      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bc0:	4a85      	ldr	r2, [pc, #532]	; (8000dd8 <HAL_GPIO_Init+0x28c>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d019      	beq.n	8000bfa <HAL_GPIO_Init+0xae>
 8000bc6:	4a85      	ldr	r2, [pc, #532]	; (8000ddc <HAL_GPIO_Init+0x290>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d016      	beq.n	8000bfa <HAL_GPIO_Init+0xae>
 8000bcc:	4a84      	ldr	r2, [pc, #528]	; (8000de0 <HAL_GPIO_Init+0x294>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d013      	beq.n	8000bfa <HAL_GPIO_Init+0xae>
          break;
 8000bd2:	e02c      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	623b      	str	r3, [r7, #32]
          break;
 8000bda:	e028      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	3304      	adds	r3, #4
 8000be2:	623b      	str	r3, [r7, #32]
          break;
 8000be4:	e023      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	3308      	adds	r3, #8
 8000bec:	623b      	str	r3, [r7, #32]
          break;
 8000bee:	e01e      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68db      	ldr	r3, [r3, #12]
 8000bf4:	330c      	adds	r3, #12
 8000bf6:	623b      	str	r3, [r7, #32]
          break;
 8000bf8:	e019      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d102      	bne.n	8000c08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c02:	2304      	movs	r3, #4
 8000c04:	623b      	str	r3, [r7, #32]
          break;
 8000c06:	e012      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	689b      	ldr	r3, [r3, #8]
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d105      	bne.n	8000c1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c10:	2308      	movs	r3, #8
 8000c12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	611a      	str	r2, [r3, #16]
          break;
 8000c1a:	e008      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c1c:	2308      	movs	r3, #8
 8000c1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	69fa      	ldr	r2, [r7, #28]
 8000c24:	615a      	str	r2, [r3, #20]
          break;
 8000c26:	e002      	b.n	8000c2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2bff      	cmp	r3, #255	; 0xff
 8000c32:	d801      	bhi.n	8000c38 <HAL_GPIO_Init+0xec>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	e001      	b.n	8000c3c <HAL_GPIO_Init+0xf0>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	2bff      	cmp	r3, #255	; 0xff
 8000c42:	d802      	bhi.n	8000c4a <HAL_GPIO_Init+0xfe>
 8000c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c46:	009b      	lsls	r3, r3, #2
 8000c48:	e002      	b.n	8000c50 <HAL_GPIO_Init+0x104>
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	3b08      	subs	r3, #8
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	210f      	movs	r1, #15
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	401a      	ands	r2, r3
 8000c62:	6a39      	ldr	r1, [r7, #32]
 8000c64:	693b      	ldr	r3, [r7, #16]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	f000 8096 	beq.w	8000daa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c7e:	4b59      	ldr	r3, [pc, #356]	; (8000de4 <HAL_GPIO_Init+0x298>)
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	4a58      	ldr	r2, [pc, #352]	; (8000de4 <HAL_GPIO_Init+0x298>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6193      	str	r3, [r2, #24]
 8000c8a:	4b56      	ldr	r3, [pc, #344]	; (8000de4 <HAL_GPIO_Init+0x298>)
 8000c8c:	699b      	ldr	r3, [r3, #24]
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c96:	4a54      	ldr	r2, [pc, #336]	; (8000de8 <HAL_GPIO_Init+0x29c>)
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	089b      	lsrs	r3, r3, #2
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	220f      	movs	r2, #15
 8000cae:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb2:	43db      	mvns	r3, r3
 8000cb4:	68fa      	ldr	r2, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a4b      	ldr	r2, [pc, #300]	; (8000dec <HAL_GPIO_Init+0x2a0>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d013      	beq.n	8000cea <HAL_GPIO_Init+0x19e>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4a4a      	ldr	r2, [pc, #296]	; (8000df0 <HAL_GPIO_Init+0x2a4>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d00d      	beq.n	8000ce6 <HAL_GPIO_Init+0x19a>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4a49      	ldr	r2, [pc, #292]	; (8000df4 <HAL_GPIO_Init+0x2a8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d007      	beq.n	8000ce2 <HAL_GPIO_Init+0x196>
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a48      	ldr	r2, [pc, #288]	; (8000df8 <HAL_GPIO_Init+0x2ac>)
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d101      	bne.n	8000cde <HAL_GPIO_Init+0x192>
 8000cda:	2303      	movs	r3, #3
 8000cdc:	e006      	b.n	8000cec <HAL_GPIO_Init+0x1a0>
 8000cde:	2304      	movs	r3, #4
 8000ce0:	e004      	b.n	8000cec <HAL_GPIO_Init+0x1a0>
 8000ce2:	2302      	movs	r3, #2
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_Init+0x1a0>
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e000      	b.n	8000cec <HAL_GPIO_Init+0x1a0>
 8000cea:	2300      	movs	r3, #0
 8000cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cee:	f002 0203 	and.w	r2, r2, #3
 8000cf2:	0092      	lsls	r2, r2, #2
 8000cf4:	4093      	lsls	r3, r2
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000cfc:	493a      	ldr	r1, [pc, #232]	; (8000de8 <HAL_GPIO_Init+0x29c>)
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	089b      	lsrs	r3, r3, #2
 8000d02:	3302      	adds	r3, #2
 8000d04:	68fa      	ldr	r2, [r7, #12]
 8000d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d16:	4b39      	ldr	r3, [pc, #228]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4938      	ldr	r1, [pc, #224]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]
 8000d22:	e006      	b.n	8000d32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d24:	4b35      	ldr	r3, [pc, #212]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4933      	ldr	r1, [pc, #204]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d2e:	4013      	ands	r3, r2
 8000d30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d006      	beq.n	8000d4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	492e      	ldr	r1, [pc, #184]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d44:	69bb      	ldr	r3, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	604b      	str	r3, [r1, #4]
 8000d4a:	e006      	b.n	8000d5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d4e:	685a      	ldr	r2, [r3, #4]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4929      	ldr	r1, [pc, #164]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d006      	beq.n	8000d74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d66:	4b25      	ldr	r3, [pc, #148]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d68:	689a      	ldr	r2, [r3, #8]
 8000d6a:	4924      	ldr	r1, [pc, #144]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	4313      	orrs	r3, r2
 8000d70:	608b      	str	r3, [r1, #8]
 8000d72:	e006      	b.n	8000d82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d74:	4b21      	ldr	r3, [pc, #132]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d76:	689a      	ldr	r2, [r3, #8]
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	43db      	mvns	r3, r3
 8000d7c:	491f      	ldr	r1, [pc, #124]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d7e:	4013      	ands	r3, r2
 8000d80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d006      	beq.n	8000d9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d8e:	4b1b      	ldr	r3, [pc, #108]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	491a      	ldr	r1, [pc, #104]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d94:	69bb      	ldr	r3, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	60cb      	str	r3, [r1, #12]
 8000d9a:	e006      	b.n	8000daa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000d9e:	68da      	ldr	r2, [r3, #12]
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	43db      	mvns	r3, r3
 8000da4:	4915      	ldr	r1, [pc, #84]	; (8000dfc <HAL_GPIO_Init+0x2b0>)
 8000da6:	4013      	ands	r3, r2
 8000da8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dac:	3301      	adds	r3, #1
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	f47f aed0 	bne.w	8000b60 <HAL_GPIO_Init+0x14>
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	372c      	adds	r7, #44	; 0x2c
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bc80      	pop	{r7}
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	10210000 	.word	0x10210000
 8000dd0:	10110000 	.word	0x10110000
 8000dd4:	10120000 	.word	0x10120000
 8000dd8:	10310000 	.word	0x10310000
 8000ddc:	10320000 	.word	0x10320000
 8000de0:	10220000 	.word	0x10220000
 8000de4:	40021000 	.word	0x40021000
 8000de8:	40010000 	.word	0x40010000
 8000dec:	40010800 	.word	0x40010800
 8000df0:	40010c00 	.word	0x40010c00
 8000df4:	40011000 	.word	0x40011000
 8000df8:	40011400 	.word	0x40011400
 8000dfc:	40010400 	.word	0x40010400

08000e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
 8000e08:	460b      	mov	r3, r1
 8000e0a:	807b      	strh	r3, [r7, #2]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e10:	787b      	ldrb	r3, [r7, #1]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e16:	887a      	ldrh	r2, [r7, #2]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e1c:	e003      	b.n	8000e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	041a      	lsls	r2, r3, #16
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	611a      	str	r2, [r3, #16]
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e26c      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f000 8087 	beq.w	8000f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e50:	4b92      	ldr	r3, [pc, #584]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f003 030c 	and.w	r3, r3, #12
 8000e58:	2b04      	cmp	r3, #4
 8000e5a:	d00c      	beq.n	8000e76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e5c:	4b8f      	ldr	r3, [pc, #572]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b08      	cmp	r3, #8
 8000e66:	d112      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5e>
 8000e68:	4b8c      	ldr	r3, [pc, #560]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e74:	d10b      	bne.n	8000e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e76:	4b89      	ldr	r3, [pc, #548]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d06c      	beq.n	8000f5c <HAL_RCC_OscConfig+0x12c>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d168      	bne.n	8000f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e246      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e96:	d106      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x76>
 8000e98:	4b80      	ldr	r3, [pc, #512]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a7f      	ldr	r2, [pc, #508]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	e02e      	b.n	8000f04 <HAL_RCC_OscConfig+0xd4>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d10c      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x98>
 8000eae:	4b7b      	ldr	r3, [pc, #492]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7a      	ldr	r2, [pc, #488]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eb8:	6013      	str	r3, [r2, #0]
 8000eba:	4b78      	ldr	r3, [pc, #480]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a77      	ldr	r2, [pc, #476]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e01d      	b.n	8000f04 <HAL_RCC_OscConfig+0xd4>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ed0:	d10c      	bne.n	8000eec <HAL_RCC_OscConfig+0xbc>
 8000ed2:	4b72      	ldr	r3, [pc, #456]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a71      	ldr	r2, [pc, #452]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4b6f      	ldr	r3, [pc, #444]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a6e      	ldr	r2, [pc, #440]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	e00b      	b.n	8000f04 <HAL_RCC_OscConfig+0xd4>
 8000eec:	4b6b      	ldr	r3, [pc, #428]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a6a      	ldr	r2, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b68      	ldr	r3, [pc, #416]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a67      	ldr	r2, [pc, #412]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000efe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d013      	beq.n	8000f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f0c:	f7ff fd0e 	bl	800092c <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f14:	f7ff fd0a 	bl	800092c <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e1fa      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f26:	4b5d      	ldr	r3, [pc, #372]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f0      	beq.n	8000f14 <HAL_RCC_OscConfig+0xe4>
 8000f32:	e014      	b.n	8000f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fcfa 	bl	800092c <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3a:	e008      	b.n	8000f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f3c:	f7ff fcf6 	bl	800092c <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b64      	cmp	r3, #100	; 0x64
 8000f48:	d901      	bls.n	8000f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e1e6      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f4e:	4b53      	ldr	r3, [pc, #332]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f0      	bne.n	8000f3c <HAL_RCC_OscConfig+0x10c>
 8000f5a:	e000      	b.n	8000f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f003 0302 	and.w	r3, r3, #2
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d063      	beq.n	8001032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f6a:	4b4c      	ldr	r3, [pc, #304]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f003 030c 	and.w	r3, r3, #12
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00b      	beq.n	8000f8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f76:	4b49      	ldr	r3, [pc, #292]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b08      	cmp	r3, #8
 8000f80:	d11c      	bne.n	8000fbc <HAL_RCC_OscConfig+0x18c>
 8000f82:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d116      	bne.n	8000fbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f8e:	4b43      	ldr	r3, [pc, #268]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d005      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x176>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	691b      	ldr	r3, [r3, #16]
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d001      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e1ba      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa6:	4b3d      	ldr	r3, [pc, #244]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	00db      	lsls	r3, r3, #3
 8000fb4:	4939      	ldr	r1, [pc, #228]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fba:	e03a      	b.n	8001032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	691b      	ldr	r3, [r3, #16]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d020      	beq.n	8001006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fcaf 	bl	800092c <HAL_GetTick>
 8000fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fcab 	bl	800092c <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e19b      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f0      	beq.n	8000fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4927      	ldr	r1, [pc, #156]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8001000:	4313      	orrs	r3, r2
 8001002:	600b      	str	r3, [r1, #0]
 8001004:	e015      	b.n	8001032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <HAL_RCC_OscConfig+0x270>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800100c:	f7ff fc8e 	bl	800092c <HAL_GetTick>
 8001010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001012:	e008      	b.n	8001026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001014:	f7ff fc8a 	bl	800092c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b02      	cmp	r3, #2
 8001020:	d901      	bls.n	8001026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001022:	2303      	movs	r3, #3
 8001024:	e17a      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001026:	4b1d      	ldr	r3, [pc, #116]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b00      	cmp	r3, #0
 8001030:	d1f0      	bne.n	8001014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0308 	and.w	r3, r3, #8
 800103a:	2b00      	cmp	r3, #0
 800103c:	d03a      	beq.n	80010b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d019      	beq.n	800107a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <HAL_RCC_OscConfig+0x274>)
 8001048:	2201      	movs	r2, #1
 800104a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800104c:	f7ff fc6e 	bl	800092c <HAL_GetTick>
 8001050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001052:	e008      	b.n	8001066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001054:	f7ff fc6a 	bl	800092c <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d901      	bls.n	8001066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001062:	2303      	movs	r3, #3
 8001064:	e15a      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001066:	4b0d      	ldr	r3, [pc, #52]	; (800109c <HAL_RCC_OscConfig+0x26c>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	2b00      	cmp	r3, #0
 8001070:	d0f0      	beq.n	8001054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f000 faa8 	bl	80015c8 <RCC_Delay>
 8001078:	e01c      	b.n	80010b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_RCC_OscConfig+0x274>)
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001080:	f7ff fc54 	bl	800092c <HAL_GetTick>
 8001084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001086:	e00f      	b.n	80010a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001088:	f7ff fc50 	bl	800092c <HAL_GetTick>
 800108c:	4602      	mov	r2, r0
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	1ad3      	subs	r3, r2, r3
 8001092:	2b02      	cmp	r3, #2
 8001094:	d908      	bls.n	80010a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001096:	2303      	movs	r3, #3
 8001098:	e140      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000
 80010a0:	42420000 	.word	0x42420000
 80010a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010a8:	4b9e      	ldr	r3, [pc, #632]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	f003 0302 	and.w	r3, r3, #2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d1e9      	bne.n	8001088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	2b00      	cmp	r3, #0
 80010be:	f000 80a6 	beq.w	800120e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010c6:	4b97      	ldr	r3, [pc, #604]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80010c8:	69db      	ldr	r3, [r3, #28]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d10d      	bne.n	80010ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010d2:	4b94      	ldr	r3, [pc, #592]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	4a93      	ldr	r2, [pc, #588]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010dc:	61d3      	str	r3, [r2, #28]
 80010de:	4b91      	ldr	r3, [pc, #580]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e6:	60bb      	str	r3, [r7, #8]
 80010e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010ea:	2301      	movs	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ee:	4b8e      	ldr	r3, [pc, #568]	; (8001328 <HAL_RCC_OscConfig+0x4f8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d118      	bne.n	800112c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010fa:	4b8b      	ldr	r3, [pc, #556]	; (8001328 <HAL_RCC_OscConfig+0x4f8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a8a      	ldr	r2, [pc, #552]	; (8001328 <HAL_RCC_OscConfig+0x4f8>)
 8001100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001106:	f7ff fc11 	bl	800092c <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800110e:	f7ff fc0d 	bl	800092c <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b64      	cmp	r3, #100	; 0x64
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e0fd      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001120:	4b81      	ldr	r3, [pc, #516]	; (8001328 <HAL_RCC_OscConfig+0x4f8>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d106      	bne.n	8001142 <HAL_RCC_OscConfig+0x312>
 8001134:	4b7b      	ldr	r3, [pc, #492]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4a7a      	ldr	r2, [pc, #488]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6213      	str	r3, [r2, #32]
 8001140:	e02d      	b.n	800119e <HAL_RCC_OscConfig+0x36e>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	68db      	ldr	r3, [r3, #12]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10c      	bne.n	8001164 <HAL_RCC_OscConfig+0x334>
 800114a:	4b76      	ldr	r3, [pc, #472]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	4a75      	ldr	r2, [pc, #468]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	6213      	str	r3, [r2, #32]
 8001156:	4b73      	ldr	r3, [pc, #460]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a72      	ldr	r2, [pc, #456]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	e01c      	b.n	800119e <HAL_RCC_OscConfig+0x36e>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	2b05      	cmp	r3, #5
 800116a:	d10c      	bne.n	8001186 <HAL_RCC_OscConfig+0x356>
 800116c:	4b6d      	ldr	r3, [pc, #436]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	4a6c      	ldr	r2, [pc, #432]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001172:	f043 0304 	orr.w	r3, r3, #4
 8001176:	6213      	str	r3, [r2, #32]
 8001178:	4b6a      	ldr	r3, [pc, #424]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a69      	ldr	r2, [pc, #420]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800117e:	f043 0301 	orr.w	r3, r3, #1
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	e00b      	b.n	800119e <HAL_RCC_OscConfig+0x36e>
 8001186:	4b67      	ldr	r3, [pc, #412]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001188:	6a1b      	ldr	r3, [r3, #32]
 800118a:	4a66      	ldr	r2, [pc, #408]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800118c:	f023 0301 	bic.w	r3, r3, #1
 8001190:	6213      	str	r3, [r2, #32]
 8001192:	4b64      	ldr	r3, [pc, #400]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a63      	ldr	r2, [pc, #396]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001198:	f023 0304 	bic.w	r3, r3, #4
 800119c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d015      	beq.n	80011d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a6:	f7ff fbc1 	bl	800092c <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ac:	e00a      	b.n	80011c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ae:	f7ff fbbd 	bl	800092c <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80011bc:	4293      	cmp	r3, r2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e0ab      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011c4:	4b57      	ldr	r3, [pc, #348]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f003 0302 	and.w	r3, r3, #2
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d0ee      	beq.n	80011ae <HAL_RCC_OscConfig+0x37e>
 80011d0:	e014      	b.n	80011fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011d2:	f7ff fbab 	bl	800092c <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d8:	e00a      	b.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011da:	f7ff fba7 	bl	800092c <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d901      	bls.n	80011f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011ec:	2303      	movs	r3, #3
 80011ee:	e095      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011f0:	4b4c      	ldr	r3, [pc, #304]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	f003 0302 	and.w	r3, r3, #2
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d1ee      	bne.n	80011da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011fc:	7dfb      	ldrb	r3, [r7, #23]
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d105      	bne.n	800120e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001202:	4b48      	ldr	r3, [pc, #288]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a47      	ldr	r2, [pc, #284]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001208:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8081 	beq.w	800131a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001218:	4b42      	ldr	r3, [pc, #264]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 030c 	and.w	r3, r3, #12
 8001220:	2b08      	cmp	r3, #8
 8001222:	d061      	beq.n	80012e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	69db      	ldr	r3, [r3, #28]
 8001228:	2b02      	cmp	r3, #2
 800122a:	d146      	bne.n	80012ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800122c:	4b3f      	ldr	r3, [pc, #252]	; (800132c <HAL_RCC_OscConfig+0x4fc>)
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001232:	f7ff fb7b 	bl	800092c <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001238:	e008      	b.n	800124c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800123a:	f7ff fb77 	bl	800092c <HAL_GetTick>
 800123e:	4602      	mov	r2, r0
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	2b02      	cmp	r3, #2
 8001246:	d901      	bls.n	800124c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001248:	2303      	movs	r3, #3
 800124a:	e067      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800124c:	4b35      	ldr	r3, [pc, #212]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d1f0      	bne.n	800123a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001260:	d108      	bne.n	8001274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001262:	4b30      	ldr	r3, [pc, #192]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	492d      	ldr	r1, [pc, #180]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001270:	4313      	orrs	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001274:	4b2b      	ldr	r3, [pc, #172]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a19      	ldr	r1, [r3, #32]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001284:	430b      	orrs	r3, r1
 8001286:	4927      	ldr	r1, [pc, #156]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800128c:	4b27      	ldr	r3, [pc, #156]	; (800132c <HAL_RCC_OscConfig+0x4fc>)
 800128e:	2201      	movs	r2, #1
 8001290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001292:	f7ff fb4b 	bl	800092c <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800129a:	f7ff fb47 	bl	800092c <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e037      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x46a>
 80012b8:	e02f      	b.n	800131a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012ba:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_RCC_OscConfig+0x4fc>)
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012c0:	f7ff fb34 	bl	800092c <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012c8:	f7ff fb30 	bl	800092c <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e020      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x498>
 80012e6:	e018      	b.n	800131a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	69db      	ldr	r3, [r3, #28]
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e013      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_RCC_OscConfig+0x4f4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	429a      	cmp	r2, r3
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	429a      	cmp	r2, r3
 8001314:	d001      	beq.n	800131a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40021000 	.word	0x40021000
 8001328:	40007000 	.word	0x40007000
 800132c:	42420060 	.word	0x42420060

08001330 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e0d0      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001344:	4b6a      	ldr	r3, [pc, #424]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d910      	bls.n	8001374 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001352:	4b67      	ldr	r3, [pc, #412]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f023 0207 	bic.w	r2, r3, #7
 800135a:	4965      	ldr	r1, [pc, #404]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	4313      	orrs	r3, r2
 8001360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001362:	4b63      	ldr	r3, [pc, #396]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	429a      	cmp	r2, r3
 800136e:	d001      	beq.n	8001374 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	e0b8      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800138c:	4b59      	ldr	r3, [pc, #356]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	4a58      	ldr	r2, [pc, #352]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001396:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0308 	and.w	r3, r3, #8
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013a4:	4b53      	ldr	r3, [pc, #332]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80013ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013b0:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	494d      	ldr	r1, [pc, #308]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d040      	beq.n	8001450 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d107      	bne.n	80013e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	4b47      	ldr	r3, [pc, #284]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d115      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e07f      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d107      	bne.n	80013fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d109      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e073      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013fe:	4b3d      	ldr	r3, [pc, #244]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e06b      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800140e:	4b39      	ldr	r3, [pc, #228]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f023 0203 	bic.w	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4936      	ldr	r1, [pc, #216]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	4313      	orrs	r3, r2
 800141e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001420:	f7ff fa84 	bl	800092c <HAL_GetTick>
 8001424:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001426:	e00a      	b.n	800143e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001428:	f7ff fa80 	bl	800092c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	; 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e053      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800143e:	4b2d      	ldr	r3, [pc, #180]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 020c 	and.w	r2, r3, #12
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	429a      	cmp	r2, r3
 800144e:	d1eb      	bne.n	8001428 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d210      	bcs.n	8001480 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800145e:	4b24      	ldr	r3, [pc, #144]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f023 0207 	bic.w	r2, r3, #7
 8001466:	4922      	ldr	r1, [pc, #136]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	4313      	orrs	r3, r2
 800146c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d001      	beq.n	8001480 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e032      	b.n	80014e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0304 	and.w	r3, r3, #4
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	4916      	ldr	r1, [pc, #88]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 800149a:	4313      	orrs	r3, r2
 800149c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0308 	and.w	r3, r3, #8
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d009      	beq.n	80014be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014aa:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	490e      	ldr	r1, [pc, #56]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014be:	f000 f821 	bl	8001504 <HAL_RCC_GetSysClockFreq>
 80014c2:	4601      	mov	r1, r0
 80014c4:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <HAL_RCC_ClockConfig+0x1c4>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	4a0a      	ldr	r2, [pc, #40]	; (80014f8 <HAL_RCC_ClockConfig+0x1c8>)
 80014d0:	5cd3      	ldrb	r3, [r2, r3]
 80014d2:	fa21 f303 	lsr.w	r3, r1, r3
 80014d6:	4a09      	ldr	r2, [pc, #36]	; (80014fc <HAL_RCC_ClockConfig+0x1cc>)
 80014d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <HAL_RCC_ClockConfig+0x1d0>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff f9e2 	bl	80008a8 <HAL_InitTick>

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40022000 	.word	0x40022000
 80014f4:	40021000 	.word	0x40021000
 80014f8:	08001bcc 	.word	0x08001bcc
 80014fc:	20000000 	.word	0x20000000
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001504:	b490      	push	{r4, r7}
 8001506:	b08a      	sub	sp, #40	; 0x28
 8001508:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800150a:	4b2a      	ldr	r3, [pc, #168]	; (80015b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800150c:	1d3c      	adds	r4, r7, #4
 800150e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001510:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001514:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001516:	881b      	ldrh	r3, [r3, #0]
 8001518:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b04      	cmp	r3, #4
 800153c:	d002      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x40>
 800153e:	2b08      	cmp	r3, #8
 8001540:	d003      	beq.n	800154a <HAL_RCC_GetSysClockFreq+0x46>
 8001542:	e02d      	b.n	80015a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001544:	4b1e      	ldr	r3, [pc, #120]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001546:	623b      	str	r3, [r7, #32]
      break;
 8001548:	e02d      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	0c9b      	lsrs	r3, r3, #18
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001556:	4413      	add	r3, r2
 8001558:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800155c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d013      	beq.n	8001590 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	0c5b      	lsrs	r3, r3, #17
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001576:	4413      	add	r3, r2
 8001578:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800157c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001582:	fb02 f203 	mul.w	r2, r2, r3
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	fbb2 f3f3 	udiv	r3, r2, r3
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
 800158e:	e004      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001594:	fb02 f303 	mul.w	r3, r2, r3
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	623b      	str	r3, [r7, #32]
      break;
 800159e:	e002      	b.n	80015a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80015a0:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a2:	623b      	str	r3, [r7, #32]
      break;
 80015a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015a6:	6a3b      	ldr	r3, [r7, #32]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc90      	pop	{r4, r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	08001b40 	.word	0x08001b40
 80015b8:	08001b50 	.word	0x08001b50
 80015bc:	40021000 	.word	0x40021000
 80015c0:	007a1200 	.word	0x007a1200
 80015c4:	003d0900 	.word	0x003d0900

080015c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015d0:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <RCC_Delay+0x34>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <RCC_Delay+0x38>)
 80015d6:	fba2 2303 	umull	r2, r3, r2, r3
 80015da:	0a5b      	lsrs	r3, r3, #9
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015e4:	bf00      	nop
  }
  while (Delay --);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	60fa      	str	r2, [r7, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f9      	bne.n	80015e4 <RCC_Delay+0x1c>
}
 80015f0:	bf00      	nop
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000000 	.word	0x20000000
 8001600:	10624dd3 	.word	0x10624dd3

08001604 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e076      	b.n	8001704 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161a:	2b00      	cmp	r3, #0
 800161c:	d108      	bne.n	8001630 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001626:	d009      	beq.n	800163c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	61da      	str	r2, [r3, #28]
 800162e:	e005      	b.n	800163c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d106      	bne.n	800165c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff f87e 	bl	8000758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2202      	movs	r2, #2
 8001660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001672:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ac:	431a      	orrs	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016c0:	ea42 0103 	orr.w	r1, r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	0c1a      	lsrs	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f002 0204 	and.w	r2, r2, #4
 80016e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	69da      	ldr	r2, [r3, #28]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001702:	2300      	movs	r3, #0
}
 8001704:	4618      	mov	r0, r3
 8001706:	3708      	adds	r7, #8
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}

0800170c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b088      	sub	sp, #32
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	603b      	str	r3, [r7, #0]
 8001718:	4613      	mov	r3, r2
 800171a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800171c:	2300      	movs	r3, #0
 800171e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_SPI_Transmit+0x22>
 800172a:	2302      	movs	r3, #2
 800172c:	e126      	b.n	800197c <HAL_SPI_Transmit+0x270>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2201      	movs	r2, #1
 8001732:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001736:	f7ff f8f9 	bl	800092c <HAL_GetTick>
 800173a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800173c:	88fb      	ldrh	r3, [r7, #6]
 800173e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d002      	beq.n	8001752 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800174c:	2302      	movs	r3, #2
 800174e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001750:	e10b      	b.n	800196a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d002      	beq.n	800175e <HAL_SPI_Transmit+0x52>
 8001758:	88fb      	ldrh	r3, [r7, #6]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001762:	e102      	b.n	800196a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2203      	movs	r2, #3
 8001768:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	88fa      	ldrh	r2, [r7, #6]
 800177c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	88fa      	ldrh	r2, [r7, #6]
 8001782:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2200      	movs	r2, #0
 800178e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2200      	movs	r2, #0
 80017a0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017aa:	d10f      	bne.n	80017cc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80017ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80017ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d6:	2b40      	cmp	r3, #64	; 0x40
 80017d8:	d007      	beq.n	80017ea <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80017f2:	d14b      	bne.n	800188c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d002      	beq.n	8001802 <HAL_SPI_Transmit+0xf6>
 80017fc:	8afb      	ldrh	r3, [r7, #22]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d13e      	bne.n	8001880 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	881a      	ldrh	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	1c9a      	adds	r2, r3, #2
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001826:	e02b      	b.n	8001880 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b02      	cmp	r3, #2
 8001834:	d112      	bne.n	800185c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	881a      	ldrh	r2, [r3, #0]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	1c9a      	adds	r2, r3, #2
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001850:	b29b      	uxth	r3, r3
 8001852:	3b01      	subs	r3, #1
 8001854:	b29a      	uxth	r2, r3
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	86da      	strh	r2, [r3, #54]	; 0x36
 800185a:	e011      	b.n	8001880 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800185c:	f7ff f866 	bl	800092c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d803      	bhi.n	8001874 <HAL_SPI_Transmit+0x168>
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001872:	d102      	bne.n	800187a <HAL_SPI_Transmit+0x16e>
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d102      	bne.n	8001880 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800187e:	e074      	b.n	800196a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001884:	b29b      	uxth	r3, r3
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ce      	bne.n	8001828 <HAL_SPI_Transmit+0x11c>
 800188a:	e04c      	b.n	8001926 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HAL_SPI_Transmit+0x18e>
 8001894:	8afb      	ldrh	r3, [r7, #22]
 8001896:	2b01      	cmp	r3, #1
 8001898:	d140      	bne.n	800191c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	330c      	adds	r3, #12
 80018a4:	7812      	ldrb	r2, [r2, #0]
 80018a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	1c5a      	adds	r2, r3, #1
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80018c0:	e02c      	b.n	800191c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d113      	bne.n	80018f8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	330c      	adds	r3, #12
 80018da:	7812      	ldrb	r2, [r2, #0]
 80018dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	1c5a      	adds	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	3b01      	subs	r3, #1
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	86da      	strh	r2, [r3, #54]	; 0x36
 80018f6:	e011      	b.n	800191c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80018f8:	f7ff f818 	bl	800092c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	429a      	cmp	r2, r3
 8001906:	d803      	bhi.n	8001910 <HAL_SPI_Transmit+0x204>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d102      	bne.n	8001916 <HAL_SPI_Transmit+0x20a>
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d102      	bne.n	800191c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	77fb      	strb	r3, [r7, #31]
          goto error;
 800191a:	e026      	b.n	800196a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001920:	b29b      	uxth	r3, r3
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1cd      	bne.n	80018c2 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	6839      	ldr	r1, [r7, #0]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f8b2 	bl	8001a94 <SPI_EndRxTxTransaction>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10a      	bne.n	800195a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001944:	2300      	movs	r3, #0
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	77fb      	strb	r3, [r7, #31]
 8001966:	e000      	b.n	800196a <HAL_SPI_Transmit+0x25e>
  }

error:
 8001968:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800197a:	7ffb      	ldrb	r3, [r7, #31]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3720      	adds	r7, #32
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b088      	sub	sp, #32
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	4613      	mov	r3, r2
 8001992:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001994:	f7fe ffca 	bl	800092c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	683a      	ldr	r2, [r7, #0]
 80019a0:	4413      	add	r3, r2
 80019a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80019a4:	f7fe ffc2 	bl	800092c <HAL_GetTick>
 80019a8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	015b      	lsls	r3, r3, #5
 80019b0:	0d1b      	lsrs	r3, r3, #20
 80019b2:	69fa      	ldr	r2, [r7, #28]
 80019b4:	fb02 f303 	mul.w	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80019ba:	e054      	b.n	8001a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c2:	d050      	beq.n	8001a66 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80019c4:	f7fe ffb2 	bl	800092c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d902      	bls.n	80019da <SPI_WaitFlagStateUntilTimeout+0x56>
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d13d      	bne.n	8001a56 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80019e8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80019f2:	d111      	bne.n	8001a18 <SPI_WaitFlagStateUntilTimeout+0x94>
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019fc:	d004      	beq.n	8001a08 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a06:	d107      	bne.n	8001a18 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a16:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a20:	d10f      	bne.n	8001a42 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a40:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e017      	b.n	8001a86 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	3b01      	subs	r3, #1
 8001a64:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	68ba      	ldr	r2, [r7, #8]
 8001a72:	429a      	cmp	r2, r3
 8001a74:	bf0c      	ite	eq
 8001a76:	2301      	moveq	r3, #1
 8001a78:	2300      	movne	r3, #0
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	79fb      	ldrb	r3, [r7, #7]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d19b      	bne.n	80019bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3720      	adds	r7, #32
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	20000000 	.word	0x20000000

08001a94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	9300      	str	r3, [sp, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7ff ff6a 	bl	8001984 <SPI_WaitFlagStateUntilTimeout>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d007      	beq.n	8001ac6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aba:	f043 0220 	orr.w	r2, r3, #32
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e000      	b.n	8001ac8 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8001ac6:	2300      	movs	r3, #0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}

08001ad0 <__libc_init_array>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	2500      	movs	r5, #0
 8001ad4:	4e0c      	ldr	r6, [pc, #48]	; (8001b08 <__libc_init_array+0x38>)
 8001ad6:	4c0d      	ldr	r4, [pc, #52]	; (8001b0c <__libc_init_array+0x3c>)
 8001ad8:	1ba4      	subs	r4, r4, r6
 8001ada:	10a4      	asrs	r4, r4, #2
 8001adc:	42a5      	cmp	r5, r4
 8001ade:	d109      	bne.n	8001af4 <__libc_init_array+0x24>
 8001ae0:	f000 f822 	bl	8001b28 <_init>
 8001ae4:	2500      	movs	r5, #0
 8001ae6:	4e0a      	ldr	r6, [pc, #40]	; (8001b10 <__libc_init_array+0x40>)
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	; (8001b14 <__libc_init_array+0x44>)
 8001aea:	1ba4      	subs	r4, r4, r6
 8001aec:	10a4      	asrs	r4, r4, #2
 8001aee:	42a5      	cmp	r5, r4
 8001af0:	d105      	bne.n	8001afe <__libc_init_array+0x2e>
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
 8001af4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001af8:	4798      	blx	r3
 8001afa:	3501      	adds	r5, #1
 8001afc:	e7ee      	b.n	8001adc <__libc_init_array+0xc>
 8001afe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b02:	4798      	blx	r3
 8001b04:	3501      	adds	r5, #1
 8001b06:	e7f2      	b.n	8001aee <__libc_init_array+0x1e>
 8001b08:	08001bdc 	.word	0x08001bdc
 8001b0c:	08001bdc 	.word	0x08001bdc
 8001b10:	08001bdc 	.word	0x08001bdc
 8001b14:	08001be0 	.word	0x08001be0

08001b18 <memset>:
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4402      	add	r2, r0
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <memset+0xa>
 8001b20:	4770      	bx	lr
 8001b22:	f803 1b01 	strb.w	r1, [r3], #1
 8001b26:	e7f9      	b.n	8001b1c <memset+0x4>

08001b28 <_init>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	bf00      	nop
 8001b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b2e:	bc08      	pop	{r3}
 8001b30:	469e      	mov	lr, r3
 8001b32:	4770      	bx	lr

08001b34 <_fini>:
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b36:	bf00      	nop
 8001b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b3a:	bc08      	pop	{r3}
 8001b3c:	469e      	mov	lr, r3
 8001b3e:	4770      	bx	lr
